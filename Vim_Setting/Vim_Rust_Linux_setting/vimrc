set shell=/bin/bash

set rtp+=~/.vim/autoload/plug.vim

call plug#begin()

Plug 'gmarik/Vundle.vim' "Plug-in Management

Plug 'nanotech/jellybeans.vim' " vim thema skin
Plug 'morhetz/gruvbox' " vim thema skin2

Plug 'neoclide/coc.nvim', {'branch': 'release'} "CocInstall

Plug 'ryanoasis/vim-devicons' "Pretty Icons
Plug 'scrooloose/nerdtree' "file system explorer

Plug 'vim-airline/vim-airline' " vim status bar
Plug 'vim-airline/vim-airline-themes' " airline_themes
Plug 'blueyed/vim-diminactive' "to dim inactive windows
Plug 'talek/obvious-resize' "Obvious Resize_Windows

Plug 'junegunn/vim-easy-align' "Vim alignment plugin.
" Plug 'nathanaelkane/vim-indent-guides' "visually displaying indent levels in Vim
Plug 'Yggdroot/indentLine'
Plug 'townk/vim-autoclose'  " automatic closing of parentheses
Plug 'luochen1990/rainbow' "colorful brackets.

Plug 'matchparenpp'         " check parentheses.
Plug 'ycm-core/YouCompleteMe' "automatic_completion

Plug 'rust-lang/rust.vim' "rust
Plug 'fannheyward/coc-rust-analyzer' "rust_analyzer
Plug 'mattn/vim-lsp-settings' "rust_analyzer__lsp
Plug 'liuchengxu/vista.vim' "Vista rust ctag
Plug 'prabirshrestha/vim-lsp' 
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'

" haskell
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': './install.sh'
    \ }


call plug#end()

" rust InlayHint color setting
" hi CocInlayHint ctermbg=125


" basic settings~
set t_Co=256

" for jellybeans
colorscheme jellybeans

" for Vista-taglist
nmap <F8> :Vista<CR>

" https://github.com/Yggdroot/indentLine
" let g:indentLine_char_list = ['|', '¦', '┆', '┊']
"  "  " for indent guide
" let g:indentguides_spacechar = '|'
" let g:indentguides_tabchar = '┆'
" let g:indentguides_tabchar = '¦'
" let g:indent_guides_enable_on_vim_startup = 1
" let g:indent_guides_start_level= 1
" let g:indent_guides_guide_size= 1

" for vim-airline
let g:airline#extensions#tabline#enabled = 1 " turn on buffer list
let g:airline_theme='hybrid'
set laststatus=2 " turn on bottom bar
let mapleader = ","
nnoremap <leader>q :bp<CR>
nnoremap <leader>w :bn<CR>

" for blueyed/vim-diminactive
let g:diminactive_enable_focus = 1

" RainBow
let g:rainbow_active = 1 

" ObviousResize
noremap <silent> <C-Up> :<C-U>ObviousResizeUp<CR>
noremap <silent> <C-Down> :<C-U>ObviousResizeDown<CR>
noremap <silent> <C-Left> :<C-U>ObviousResizeLeft<CR>
noremap <silent> <C-Right> :<C-U>ObviousResizeRight<CR>
let g:obvious_resize_default = 2
noremap <silent> <C-Up> :<C-U>ObviousResizeUp 5<CR>
let g:obvious_resize_run_tmux = 1


" rust
let g:rustfmt_autosave = 1


" rust analyzer start~~~~~~:w
let g:LanguageClient_serverCommands = {
\ 'rust': ['rust-analyzer'],
\ }
let g:ale_linters = {'rust': ['analyzer']}

"vim-lsp
set foldmethod=expr
  \ foldexpr=lsp#ui#vim#folding#foldexpr()
  \ foldtext=lsp#ui#vim#folding#foldtext()
let g:lsp_fold_enabled = 0
let g:lsp_diagnostics_enabled = 0         " disable diagnostics support
let g:lsp_document_highlight_enabled = 0

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
    
    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END


"vim-lsp_Debugging
let g:lsp_log_verbose = 1
let g:lsp_log_file = expand('~/vim-lsp.log')

" for asyncomplete.vim log
let g:asyncomplete_log_file = expand('~/asyncomplete.log')

"asyncomplete.vim
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

inoremap <expr> <cr> pumvisible() ? asyncomplete#close_popup() . "\<cr>" : "\<cr>"

imap <c-space> <Plug>(asyncomplete_force_refresh)
" For Vim 8 (<c-@> corresponds to <c-space>):
" imap <c-@> <Plug>(asyncomplete_force_refresh)

let g:asyncomplete_auto_popup = 0



" allow modifying the completeopt variable, or it will
" be overridden all the time
let g:asyncomplete_auto_completeopt = 0

autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" rust analyzer end~~~~~~

" lines to save text folding
autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent loadview
set foldmethod=manual

" clojure
nmap cqp :call VSCodeNotify('calva.jackIn')<CR>
nmap cqq :call VSCodeNotify('calva.disconnect')<CR>
nmap cpr :call VSCodeNotify('calva.loadFile')<CR>
nmap cpR :call VSCodeNotify('calva.loadNamespace')<CR>
nmap cpp :call VSCodeNotify('calva.evaluateSelection')<CR>
nmap cqc :call VSCodeNotify('calva.evalCurrentFormInREPLWindow')<CR>



"ESC setting
inoremap jk <esc>

set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

set relativenumber
syntax enable
filetype indent on
highlight Comment term=bold cterm=bold ctermfg=4
" highlight CocInlayHint ctermbg=5

set encoding=UTF-8
let $LANG = 'en'



